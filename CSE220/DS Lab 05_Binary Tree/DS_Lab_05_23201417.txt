########################--Task 01--########################

def convert_mirror(root):
    if root == None:
        return root
    root.right, root.left = root.left, root.right
    convert_mirror(root.left)
    convert_mirror(root.right)
    return root


########################--Task 02--########################

def smallest_level(root, level={}, i=0):
    if root == None:
        return
    if i in level.keys():
        if level[i] > root.elem:
            level[i] = root.elem
    else:
        level[i] = root.elem
    smallest_level(root.left, level, i + 1)
    smallest_level(root.right, level, i + 1)
    return level


########################--Task 03--########################

def sumTree(root, i=0):
    if root == None:
        return 0
    return (root.elem if i == 0 else root.elem % i) + sumTree(root.left, i + 1) + sumTree(root.right, i + 1)


########################--Task04--########################

def swap_child(root, level, M):
    def swap(root, level, M, count=0):
        if root == None:
            return
        if  level <= count < M:
            root.left, root.right = root.right, root.left
        swap(root.left, level, M, count + 1)
        swap(root.right, level, M, count + 1)
        return
    swap(root, level, M)
    return root

#Part of Driver Code That I Wrote
root=BTNode('A')
nodeB = BTNode("B")
nodeC = BTNode("C")
nodeD = BTNode("D")
nodeE = BTNode("E")
nodeF = BTNode("F")
nodeG = BTNode("G")
nodeH = BTNode("H")
nodeI = BTNode("I")
nodeJ = BTNode("J")

root.left = nodeB
root.right = nodeC
nodeB.left = nodeD
nodeB.right = nodeE
nodeC.right = nodeF
nodeD.left = nodeG
nodeD.right = nodeH
nodeE.left = nodeI
nodeF.left = nodeJ


########################--Task 05--########################

def subtract_summation(root):
    def sum_node(root):
        if root == None:
            return 0
        return root.elem + sum_node(root.left) + sum_node(root.right)
    return sum_node(root.left) - sum_node(root.right)


# Driver Code
root = BTNode(71)
node27 = BTNode(27)
node62 = BTNode(62)
node80 = BTNode(80)
node75 = BTNode(75)
node41= BTNode(41)
node3 = BTNode(3)
node87 = BTNode(87)
node56 = BTNode(56)
node19 = BTNode(19)
node89 = BTNode(89)

root.left = node27
root.right = node62
node27.left = node80
node27.right = node75
node80.left = node87
node80.right = node56
node62.left = node41
node62.right = node3
node3.left = node19
node3.right = node89


########################--Task06--########################

def level_sum(root):
    def sum_level(root, i=0):
        if root == None:
            return 0
        if i % 2 == 0:
            return sum_level(root.left, i + 1) + sum_level(root.right, i + 1) - root.elem
        else:
            return sum_level(root.left, i + 1) + sum_level(root.right, i + 1) + root.elem
    return sum_level(root)